#!/usr/bin/env python

# Copyright (C) 2020, alberpilot

# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

from datetime import datetime
import sys
import time
import os
import re
import json
import sys

try:
    import requests
    import urllib
    from requests.auth import HTTPBasicAuth
    from elasticsearch import Elasticsearch, RequestsHttpConnection
except Exception as e:
    print("No module 'requests or elasticsearch' found.")
    sys.exit()


# Read the alert file
alert_file = open(sys.argv[1])
alert_json = json.loads(alert_file.read())
alert_file.close()

alert_id = alert_json['rule']['id']

debug_enabled = True
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)

es = Elasticsearch(
    connection_class=RequestsHttpConnection,
    host="localhost",
    port=9200,
    use_ssl=False,
    verify_certs=False
)


def debug(msg):
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)
        print(msg)
        f = open(log_file, "a")
        f.write(msg)
        f.close()

# Aux functions  
def log(msgtype="INFO", msg=None, log_file="/var/ossec/logs/correlation.log"):
    now = time.strftime("%a %b %d %H:%M:%S %Z %Y")
    log = {
        "subject": "Integration",
        "timestamp": now,
        "type": msgtype,
        "message": msg
    }
    
    f = open(log_file,"a")
    f.write("{0}\n".format(log))
    f.close()


def correlate_alerts(id):

    # Preparing the query. Search 5 minutes ago if an alert with a given id was triggered. 
    payload={"from":0,"size":1000,"query":{"bool":{"minimum_should_match":1,"should":[{"term":{"rule.id":id}}],"filter":[{"range":{"@timestamp":{"gte":"now-45m","lte":"now"}}}]}}}

    # Query to elasticsearch. Today's indice. 
    res = es.search(index="wazuh-alerts-3.x-"+datetime.utcnow().strftime('%Y.%m.%d'), body=payload, request_timeout=30)

    #print(res['hits']['total']['value'])
    if res['hits']['total']['value'] > 0:
        log("INFO","The correlation occurred.","/var/ossec/logs/correlation.log")
        

if __name__ == "__main__":
    debug("# Starting")
    try:
        
        if alert_id == 100002:
            correlate_alerts("100001") 
        else:
            correlate_alerts("100002") 
        
    except Exception as exception:
        #exit(msg="MAIN: {0}".format(str(exception)))
        print("Error: {0}".format(str(exception)))


